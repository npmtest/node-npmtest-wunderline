{"/home/travis/build/npmtest/node-npmtest-wunderline/test.js":"/* istanbul instrument in package npmtest_wunderline */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wunderline/lib.npmtest_wunderline.js":"/* istanbul instrument in package npmtest_wunderline */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wunderline = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wunderline = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wunderline/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wunderline && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wunderline */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wunderline\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wunderline.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_wunderline.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wunderline.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_wunderline.__dirname + '/lib.npmtest_wunderline.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar pkg = require('./package.json')\n\napp.version(pkg.version)\n  .command('auth', 'Authenticate Wunderline')\n  .command('add [task]', 'Add a task to your inbox')\n  .command('done', 'Mark a task as done')\n  .command('inbox', 'View your inbox')\n  .command('starred', 'View starred tasks')\n  .command('today', 'View tasks due today')\n  .command('week', 'View tasks due this week')\n  .command('all', 'View all of your tasks')\n  .command('overdue', 'View overdue tasks')\n  .command('search [query]', 'Search your tasks')\n  .command('list [query]', 'Search your lists')\n  .command('lists', 'List your lists')\n  .command('open', 'Open Wunderlist')\n  .command('export', 'Export your data')\n  .command('whoami', 'Display effective user')\n  .command('gc', 'Delete completed tasks')\n  .command('set-platform', 'Set your preferred application platform')\n  .command('flush', 'Flush the application cache')\n\napp.parse(process.argv)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-add.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar async = require('async')\nvar stdin = require('get-stdin')\nvar trunc = require('lodash.trunc')\nvar moment = require('moment')\nvar opn = require('opn')\nvar api = require('./lib/api')\nvar getInbox = require('./lib/get-inbox')\nvar Configstore = require('configstore')\nvar conf = new Configstore('wunderline', {platform: 'web'})\nvar auth = require('./lib/auth')\n\nfunction openTask (task) {\n  var web = 'https://www.wunderlist.com/#/tasks/' + task.id\n  var mac = 'wunderlist://tasks/' + task.id\n  if (conf.get('platform') === 'mac') return opn(mac)\n  opn(web)\n}\n\nfunction openList (list) {\n  var web = 'https://www.wunderlist.com/#/lists/' + list.id\n  var mac = 'wunderlist://lists/' + list.id\n  if (conf.get('platform') === 'mac') return opn(mac)\n  opn(web)\n}\n\napp\n  .description('Add a task to your inbox')\n  .usage('[task]')\n  .option('-l, --list [name]', 'Specify a list other than your inbox')\n  .option('--starred', 'Set the new task as starred')\n  .option('--today', 'Set the due date to today')\n  .option('--tomorrow', 'Set the due date to tomorrow')\n  .option('--due [date]', 'Set a specific due date')\n  .option('--note [note]', 'Attach a note to the new task')\n  .option('--subtask [task]', 'Add a subtask to the new task', collect, [])\n  .option('-o, --open', 'Open Wunderlist on completion')\n  .option('-s, --stdin', 'Create tasks from stdin')\n  .parse(process.argv)\n\nfunction truncateTitle (title) {\n  return trunc(title.trim(), 254)\n}\n\nfunction collect (value, memo) {\n  memo.push(value)\n  return memo\n}\n\nfunction getListId (cb) {\n  if (!app.list) {\n    return getInbox(function (inbox) {\n      cb(inbox.id)\n    })\n  }\n\n  var list = {\n    title: app.list.trim()\n  }\n\n  api('/lists', function (err, res, body) {\n    if (err) process.exit(1)\n\n    var existing = body.filter(function (item) {\n      return item.title.toLowerCase().trim() === list.title.toLowerCase()\n    })\n    if (existing.length > 0) {\n      return cb(existing[0].id)\n    }\n    api.post({url: '/lists', body: list}, function (err, res, body) {\n      if (err) process.exit(1)\n\n      cb(body.id)\n    })\n  })\n}\n\nfunction main () {\n  var dueDate\n  var starred = false\n\n  if (app.today) {\n    dueDate = moment().format('YYYY-MM-DD')\n  }\n\n  if (app.tomorrow) {\n    dueDate = moment().add(1, 'day').format('YYYY-MM-DD')\n  }\n\n  if (app.due) {\n    if (/\\d{4}\\-\\d{2}\\-\\d{2}/.test(app.due)) {\n      dueDate = app.due\n    } else {\n      console.error('Invalid due date!')\n      process.exit(1)\n    }\n  }\n\n  if (app.starred) {\n    starred = true\n  }\n\n  if (typeof app.stdin === 'undefined') {\n    var title = app.args.join(' ')\n\n    if (!title) {\n      process.exit(1)\n    }\n\n    async.waterfall([\n      function (cb) {\n        getListId(function (inboxId) {\n          cb(null, inboxId)\n        })\n      },\n      function (inboxId, cb) {\n        cb(null, {\n          title: truncateTitle(title),\n          list_id: inboxId,\n          due_date: dueDate,\n          starred: starred\n        })\n      },\n      function (task, cb) {\n        api.post({url: '/tasks', body: task}, function (err, res, body) {\n          if (err || body.error) {\n            console.error(JSON.stringify(err || body.error, null, 2))\n            process.exit(1)\n          }\n\n          cb(null, body)\n        })\n      },\n      function (task, cb) {\n        if (app.note) {\n          api.post({url: '/notes', body: { task_id: task.id, content: app.note }}, function (err, res, body) {\n            if (err || body.error) {\n              console.error(JSON.stringify(err || body.error, null, 2))\n              process.exit(1)\n            }\n\n            cb(null, task)\n          })\n        } else {\n          cb(null, task)\n        }\n      },\n      function (task, cb) {\n        if (app.subtask) {\n          for (var i = app.subtask.length - 1; i >= 0; i--) {\n            api.post({url: '/subtasks', body: { task_id: task.id, title: app.subtask[i], completed: false }}, function (err, res, body) {\n              if (err || body.error) {\n                console.error(JSON.stringify(err || body.error, null, 2))\n                process.exit(1)\n              }\n\n              cb(null, task)\n            })\n          }\n        } else {\n          cb(null, task)\n        }\n      }\n    ], function (err, res) {\n      if (err) {\n        process.exit(1)\n      }\n      if (app.open) {\n        openTask(res)\n      }\n      process.exit()\n    })\n  }\n\n  if (app.stdin === true) {\n    async.waterfall([\n      function (cb) {\n        stdin().then((data) => {\n          var sep = data.indexOf('\\r\\n') !== -1 ? '\\r\\n' : '\\n'\n          var lines = data.trim().split(sep)\n          cb(null, lines)\n        })\n      },\n      function (lines, cb) {\n        getListId(function (listId) {\n          cb(null, listId, lines)\n        })\n      },\n      function (listId, lines, cb) {\n        var tasks = lines\n          .filter(function (line) {\n            return line.trim().length > 0\n          })\n          .map(function (line) {\n            return {\n              title: truncateTitle(line),\n              due_date: dueDate,\n              list_id: listId,\n              starred: starred\n            }\n          })\n        cb(null, tasks)\n      }\n    ], function (err, tasks) {\n      if (err) {\n        process.exit(1)\n      }\n\n      async.each(tasks, function (task, finished) {\n        api.post({url: '/tasks', body: task}, function (err, res, body) {\n          if (err || body.error) {\n            console.error(JSON.stringify(err || body.error, null, 2))\n            process.exit(1)\n          }\n          process.stderr.write('.')\n          finished()\n        })\n      }, function () {\n        if (app.open && tasks.length > 0) {\n          openList({id: tasks[0].list_id})\n        }\n\n        process.exit()\n      })\n    })\n  }\n}\n\nauth(main)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/lib/api.js":"var request = require('request')\nvar Configstore = require('configstore')\nvar conf = new Configstore('wunderline')\n\nmodule.exports = request.defaults({\n  method: 'get',\n  json: true,\n  baseUrl: 'https://a.wunderlist.com/api/v1',\n  headers: {\n    'X-Access-Token': conf.get('access_token'),\n    'X-Client-ID': conf.get('client_id')\n  }\n})\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/lib/get-inbox.js":"var api = require('./api')\nvar fs = require('fs')\nvar path = require('path')\nvar cacheFile = path.dirname(require.main.filename) + '/cache.json'\nvar request = require('request')\nvar cache = {}\n\ntry {\n  cache = require(cacheFile)\n} catch (e) {\n  //\n}\n\nmodule.exports = function getInbox (cb) {\n  if (cache.inbox) {\n    return cb(cache.inbox)\n  }\n\n  api('/lists', function (err, res, body) {\n    if (request.debug) {\n      console.log('REQUEST', 'response', 'body', body)\n    }\n\n    if (err || body.error) {\n      console.error(JSON.stringify(err || body.error, null, 2))\n      process.exit(1)\n    }\n\n    var lists = body.filter(function (item) {\n      return item.list_type === 'inbox'\n    })\n\n    var inbox = lists[0]\n\n    cache.inbox = inbox\n\n    fs.writeFile(cacheFile, JSON.stringify(cache), function (err) {\n      if (err) {\n        //\n      }\n      cb(inbox)\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/lib/auth.js":"var Configstore = require('configstore')\nvar conf = new Configstore('wunderline')\nvar wrap = require('wordwrap')(80)\n\nmodule.exports = function (callback) {\n  if (conf.get('authenticated_at')) {\n    return callback()\n  }\n  console.log(wrap('Wunderline needs application credentials before continuing... please run `wunderline auth` and follow the instructions. More info: http://git.io/vOzAn'))\n}\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-all.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar printList = require('./lib/print-list')\nvar getLists = require('./lib/get-lists')\nvar auth = require('./lib/auth')\n\napp\n  .description('View all of your tasks')\n  .parse(process.argv)\n\nfunction main () {\n  getLists(function (err, data) {\n    if (err) process.exit(1)\n\n    data.forEach(printList)\n  })\n}\n\nauth(main)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/lib/print-list.js":"var chalk = require('chalk')\nvar columnify = require('columnify')\nvar moment = require('moment')\n\nvar skipEmpty = true\n\nfunction printTasks (tasks) {\n  var ttyMaxWidth = 60\n\n  if (process.stdout.isTTY) {\n    ttyMaxWidth = process.stdout.columns - 12\n  }\n\n  var options = {\n    showHeaders: false,\n    truncate: true,\n    config: {\n      title: {\n        minWidth: 60,\n        maxWidth: ttyMaxWidth\n      },\n      due: {\n        minWidth: 12\n      }\n    }\n  }\n\n  var columns = tasks.map(formatTask)\n  var lines = columnify(columns, options).split('\\n')\n\n  tasks.forEach(function (task, index) {\n    console.log(lines[index])\n    task.subtasks.filter(function (subtask) {\n      return !subtask.completed\n    }).forEach(function (subtask, subtaskIndex) {\n      console.log('— ' + subtask.title)\n    })\n  })\n}\n\nfunction formatDate (date) {\n  var dt = moment(date)\n  var overdue = dt.isBefore(moment(), 'day')\n  var text = dt.format('ddd D MMMM')\n  if (dt.format('L') === moment().format('L')) {\n    text = 'Today'\n  }\n  if (dt.format('L') === moment().add(1, 'day').format('L')) {\n    text = 'Tomorrow'\n  }\n  if (overdue) {\n    return chalk.red(text)\n  }\n  return chalk.blue(text)\n}\n\nfunction formatTask (task) {\n  var star = task.starred ? chalk.red('★') : chalk.dim('☆')\n  var due = task.due_date ? formatDate(task.due_date) : ''\n  return {\n    title: task.title,\n    due: due,\n    starred: star\n  }\n}\n\nmodule.exports = function printList (list) {\n  if (skipEmpty && list.tasks.length === 0) {\n    return\n  }\n\n  var listTitle = list.title.toUpperCase()\n\n  list.tasks.sort(function (a, b) {\n    if (a.starred) return -1\n    if (b.starred) return 1\n    return 0\n  })\n\n  if (!list.subtasks) {\n    list.subtasks = []\n  }\n\n  list.tasks.map(function (task) {\n    task.subtasks = []\n    return task\n  })\n\n  list.subtasks.forEach(function (subtask) {\n    list.tasks.forEach(function (task, index) {\n      if (task.id === subtask.task_id) {\n        list.tasks[index].subtasks.push(subtask)\n      }\n    })\n  })\n\n  console.log(chalk.underline(listTitle + ' (' + list.tasks.length + ')'))\n  printTasks(list.tasks)\n  console.log()\n}\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/lib/get-lists.js":"var async = require('async')\nvar api = require('./api')\n\nmodule.exports = function (cb) {\n  async.waterfall([\n    function (callback) {\n      api('/lists', function (err, res, body) {\n        if (err || body.error) {\n          console.error(JSON.stringify(err || body.error, null, 2))\n          process.exit(1)\n        }\n        callback(err, body)\n      })\n    },\n    function (lists, callback) {\n      var listsWithTasks = []\n\n      async.eachLimit(lists, 10, function (list, done) {\n        async.parallel([\n          function (cb) {\n            api({url: '/tasks', qs: {list_id: list.id}}, function (err, res, body) {\n              if (err) process.exit(1)\n              list.tasks = body\n              cb()\n            })\n          },\n          function (cb) {\n            api({url: '/subtasks', qs: {list_id: list.id}}, function (err, res, body) {\n              if (err) process.exit(1)\n              list.subtasks = body\n              cb()\n            })\n          }\n        ], function (err, results) {\n          if (err) process.exit(1)\n          listsWithTasks.push(list)\n          done()\n        })\n      }, function (err) {\n        if (err) process.exit(1)\n        callback(null, listsWithTasks)\n      })\n    }\n  ], function (err, lists) {\n    lists.sort(function (a, b) {\n      if (a.list_type === 'inbox') return -1\n      if (b.list_type === 'inbox') return 1\n      return a.title > b.title\n    })\n\n    cb(err, lists)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-auth.js":"var app = require('commander')\nvar inquirer = require('inquirer')\nvar request = require('request')\nvar Configstore = require('configstore')\nvar conf = new Configstore('wunderline')\nvar wrap = require('wordwrap')(80)\n\napp\n  .description('Authenticate Wunderline')\n  .parse(process.argv)\n\nvar questions = [\n  {\n    name: 'client_id',\n    message: 'CLIENT ID',\n    validate: function (input) {\n      return input.length > 0\n    }\n  },\n  {\n    name: 'access_token',\n    message: 'ACCESS TOKEN',\n    validate: function (input) {\n      return input.length > 0\n    }\n  }\n]\n\nconsole.log(wrap('Please create a Wunderlist Application before you proceed, you can do so over here: https://developer.wunderlist.com/apps/new, once that is done please enter your access token and client id below.'))\n\ninquirer.prompt(questions).then(function (answers) {\n  request.get({\n    json: true,\n    url: 'https://a.wunderlist.com/api/v1/user',\n    headers: {\n      'X-Access-Token': answers.access_token,\n      'X-Client-ID': answers.client_id\n    }\n  }, function (err, res, body) {\n    if (err || body.error) {\n      console.error(JSON.stringify(err || body.error, null, 2))\n      process.exit(1)\n    } else if (body.invalid_request || body.unauthorized) {\n      console.error('Authentication failed (wrong CLIENT ID and/or ACCESS TOKEN)!')\n      process.exit(1)\n    }\n    conf.set('authenticated_at', new Date())\n    conf.set('client_id', answers.client_id)\n    conf.set('access_token', answers.access_token)\n    console.log('Thanks ' + body.name.split(' ')[0] + ', Wunderline has been authenticated.')\n  })\n})\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-done.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar async = require('async')\nvar fuzzysearch = require('fuzzysearch')\nvar inquirer = require('inquirer')\n\nvar getLists = require('./lib/get-lists')\nvar auth = require('./lib/auth')\nvar updateTask = require('./lib/update-task')\n\napp\n  .description('Mark a task as done')\n  .usage('[task]')\n  .parse(process.argv)\n\nfunction complete (id, callback) {\n  updateTask(id, {completed: true}, callback)\n}\n\nfunction match (terms, tasks) {\n  return tasks.filter(function (task) {\n    return terms.find(function (term) {\n      return fuzzysearch(term.toLowerCase(), task.title.toLowerCase())\n    })\n  })\n}\n\nfunction main () {\n  getLists(function (error, lists) {\n    if (error) {\n      process.exit(1)\n    }\n\n    var terms = app.args\n    var term = terms.join(' ')\n\n    var tasks = lists\n      .reduce(function (registry, list) {\n        return registry.concat(list.tasks)\n      }, [])\n\n    var matches = term.length > 0\n      ? match([term], tasks)\n      : tasks\n\n    var choices = matches.map(function (match) {\n      return {\n        checked: match.completed,\n        value: match.id,\n        name: match.title\n      }\n    })\n\n    inquirer.prompt([\n      {\n        type: 'checkbox',\n        name: 'done',\n        message: 'Select tasks to mark as done',\n        choices: choices\n      }\n    ]).then(function (answers) {\n      async.eachLimit(answers.done, 10, complete, function () {\n        process.exit(0)\n      })\n    })\n  })\n}\n\nauth(main)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/lib/update-task.js":"var api = require('./api')\n\nfunction getRevision (id, body, callback) {\n  if (body.revision) {\n    return callback(null, body.revision)\n  }\n  api.get('/tasks/' + id, function (error, response, body) {\n    if (error) {\n      return callback(error)\n    }\n    callback(null, body.revision)\n  })\n}\n\nmodule.exports = function updateTask (id, body, callback) {\n  getRevision(id, body, function (error, revision) {\n    if (error) {\n      return callback(error)\n    }\n\n    body.revision = revision\n\n    api.patch('/tasks/' + id, {\n      json: true,\n      body: body\n    }, function (error, response, body) {\n      if (error) {\n        return callback(error)\n      }\n\n      return callback(null, body)\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-export.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar async = require('async')\nvar api = require('./lib/api')\nvar auth = require('./lib/auth')\n\napp\n  .description('Export all your data')\n  .option('--pretty', 'Pretty print output')\n  .parse(process.argv)\n\nfunction showProgress () {\n  process.stderr.write('.')\n}\n\nfunction getUser (callback) {\n  api('/user', function (err, res, body) {\n    if (err) process.exit(1)\n\n    showProgress()\n    callback(null, {user: body})\n  })\n}\n\nfunction getLists (callback) {\n  api('/lists', function (err, res, body) {\n    if (err) process.exit(1)\n\n    showProgress()\n    callback(null, {lists: body})\n  })\n}\n\nfunction embedLists (data, callback) {\n  var lists = []\n  async.each(data.lists, function (list, complete) {\n    async.parallel([\n      function getTasks (cb) {\n        api({url: '/tasks', qs: {list_id: list.id, completed: false}}, function (err, res, body) {\n          showProgress()\n          cb(err, body)\n        })\n      },\n      function getCompletedTasks (cb) {\n        api({url: '/tasks', qs: {list_id: list.id, completed: true}}, function (err, res, body) {\n          showProgress()\n          cb(err, body)\n        })\n      },\n      function getSubtasks (cb) {\n        api({url: '/subtasks', qs: {list_id: list.id}}, function (err, res, body) {\n          showProgress()\n          cb(err, body)\n        })\n      },\n      function getNotes (cb) {\n        api({url: '/notes', qs: {list_id: list.id}}, function (err, res, body) {\n          if (err) process.exit(1)\n\n          showProgress()\n          cb(err, body)\n        })\n      },\n      function getFiles (cb) {\n        api({url: '/files', qs: {list_id: list.id}}, function (err, res, body) {\n          showProgress()\n          cb(err, body)\n        })\n      }\n    ], function (err, results) {\n      if (err) process.exit(1)\n\n      var tasks = [].concat(results[0]).concat(results[1])\n      var subtasks = results[2]\n      var notes = results[3]\n      var files = results[4]\n\n      tasks.forEach(function (task, index) {\n        tasks[index].subtasks = []\n        tasks[index].notes = []\n        tasks[index].files = []\n      })\n\n      subtasks.forEach(function (subtask) {\n        tasks.forEach(function (task, index) {\n          if (task.id === subtask.task_id) {\n            tasks[index].subtasks.push(subtask)\n          }\n        })\n      })\n\n      notes.forEach(function (note) {\n        tasks.forEach(function (task, index) {\n          if (task.id === note.task_id) {\n            tasks[index].notes.push(note)\n          }\n        })\n      })\n      files.forEach(function (file) {\n        tasks.forEach(function (task, index) {\n          if (task.id === file.task_id) {\n            tasks[index].files.push(file)\n          }\n        })\n      })\n      list.tasks = tasks\n      lists.push(list)\n      complete()\n    })\n  }, function (err) {\n    if (err) process.exit(1)\n\n    data.lists = lists\n    callback(err, data)\n  })\n}\n\nfunction getEmbeddedLists (callback) {\n  async.waterfall([\n    getLists,\n    embedLists\n  ], function (err, data) {\n    if (err) process.exit(1)\n\n    callback(err, data)\n  })\n}\n\nfunction main () {\n  async.parallel([\n    getUser,\n    getEmbeddedLists\n  ], function (err, results) {\n    if (err) process.exit(1)\n\n    var data = {\n      exported_at: new Date(),\n      data: {\n        user: results[0].user,\n        lists: results[1].lists\n      }\n    }\n\n    var output\n\n    if (app.pretty) {\n      output = JSON.stringify(data, null, 2)\n    } else {\n      output = JSON.stringify(data)\n    }\n\n    process.stdout.write(output)\n  })\n}\n\nauth(main)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-flush.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar Configstore = require('configstore')\nvar conf = new Configstore('wunderline')\n\napp\n  .description('Clears the application storage')\n  .parse(process.argv)\n\nconf.clear()\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-gc.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar async = require('async')\nvar api = require('./lib/api')\nvar auth = require('./lib/auth')\n\napp\n  .description('Delete completed tasks')\n  .parse(process.argv)\n\nfunction main () {\n  async.waterfall([\n    function (callback) {\n      api('/lists', function (err, res, body) {\n        if (err || body.error) {\n          console.error(JSON.stringify(err || body.error, null, 2))\n          process.exit(1)\n        }\n        callback(err, body)\n      })\n    },\n    function (results, callback) {\n      var tasks = []\n      async.eachLimit(results, 10, function (list, done) {\n        api({url: '/tasks', qs: {completed: true, list_id: list.id}}, function (err, res, body) {\n          if (err) process.exit(1)\n          body.filter(function (task) {\n            return task.completed === true\n          }).forEach(function (task) {\n            tasks.push(task)\n          })\n          done()\n        })\n      }, function () {\n        callback(null, tasks)\n      })\n    },\n    function (results, callback) {\n      async.eachLimit(results, 10, function (task, done) {\n        api.del({url: '/tasks/' + task.id, qs: {revision: task.revision}}, function (err, res, body) {\n          if (err) {\n            //\n          }\n          done()\n        })\n      })\n    }\n  ])\n}\n\nauth(main)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-inbox.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar auth = require('./lib/auth')\nvar async = require('async')\nvar api = require('./lib/api')\nvar printList = require('./lib/print-list')\nvar getInbox = require('./lib/get-inbox')\n\napp\n  .description('View your inbox')\n  .parse(process.argv)\n\nfunction main () {\n  async.waterfall([\n    function (callback) {\n      getInbox(function (list) {\n        callback(null, list)\n      })\n    },\n    function (list, callback) {\n      async.parallel([\n        function (cb) {\n          api({url: '/tasks', qs: {list_id: list.id}}, function (err, res, body) {\n            if (err) process.exit(1)\n            cb(null, body)\n          })\n        },\n        function (cb) {\n          api({url: '/subtasks', qs: {list_id: list.id}}, function (err, res, body) {\n            if (err) process.exit(1)\n            cb(null, body)\n          })\n        }\n      ], function (err, results) {\n        if (err) process.exit(1)\n        list.tasks = results[0]\n        list.subtasks = results[1]\n        callback(null, list)\n      })\n    }\n  ], function (err, list) {\n    if (err) {\n      process.exit(1)\n    }\n    printList(list)\n  })\n}\n\nauth(main)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-list.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar fuzzysearch = require('fuzzysearch')\nvar getLists = require('./lib/get-lists')\nvar printList = require('./lib/print-list')\nvar auth = require('./lib/auth')\n\napp\n  .description('Display a list')\n  .usage('[query]')\n  .parse(process.argv)\n\nfunction main () {\n  var terms = app.args\n\n  if (terms.length < 1) {\n    process.exit()\n  }\n\n  getLists(function (err, data) {\n    if (err) process.exit(1)\n\n    var lists = data.filter(function (item) {\n      var match = false\n      terms.forEach(function (term) {\n        // Case sensitive matching if smartcase found.\n        if (term.toLowerCase() !== term) {\n          if (fuzzysearch(term, item.title)) {\n            match = true\n          }\n        } else if (fuzzysearch(term.toLowerCase(), item.title.toLowerCase())) {\n          match = true\n        }\n      })\n      return match\n    })\n\n    lists.forEach(printList)\n  })\n}\n\nauth(main)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-lists.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar getLists = require('./lib/get-lists')\nvar auth = require('./lib/auth')\n\napp\n  .description('List your lists')\n  .parse(process.argv)\n\nfunction main () {\n  getLists(function (err, data) {\n    if (err) process.exit(1)\n    data.forEach(function (val, index, array) {\n      console.log('— ' + val.title + ' (' + val.tasks.length + ')')\n    })\n  })\n}\n\nauth(main)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-open.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar opn = require('opn')\nvar Configstore = require('configstore')\nvar conf = new Configstore('wunderline', {platform: 'web'})\n\napp\n  .description('Opens Wunderlist')\n  .parse(process.argv)\n\nif (conf.get('platform') === 'mac') {\n  opn('wunderlist://')\n  process.exit()\n} else {\n  opn('https://www.wunderlist.com/#/lists/inbox')\n  process.exit()\n}\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-overdue.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar moment = require('moment')\nvar getLists = require('./lib/get-lists')\nvar printList = require('./lib/print-list')\nvar auth = require('./lib/auth')\n\napp\n  .description('View overdue tasks')\n  .parse(process.argv)\n\nfunction main () {\n  getLists(function (err, data) {\n    if (err) process.exit(1)\n\n    var today = moment()\n\n    data.forEach(function (list) {\n      list.tasks = list.tasks.filter(function (item) {\n        if (!item.due_date) return false\n        return moment(item.due_date).isBefore(today, 'day')\n      })\n\n      printList(list)\n    })\n  })\n}\n\nauth(main)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-search.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar fuzzysearch = require('fuzzysearch')\nvar getLists = require('./lib/get-lists')\nvar printList = require('./lib/print-list')\nvar auth = require('./lib/auth')\n\napp\n  .description('Search tasks')\n  .usage('[query]')\n  .parse(process.argv)\n\nfunction main () {\n  var terms = app.args\n\n  if (terms.length < 1) {\n    process.exit()\n  }\n\n  getLists(function (err, data) {\n    if (err) process.exit(1)\n\n    data.forEach(function (list) {\n      list.tasks = list.tasks.filter(function (item) {\n        var found = false\n        terms.forEach(function (term) {\n          if (fuzzysearch(term.toLowerCase(), item.title.toLowerCase())) {\n            found = true\n          }\n        })\n        return found\n      })\n\n      printList(list)\n    })\n  })\n}\n\nauth(main)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-set-platform.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar Configstore = require('configstore')\nvar conf = new Configstore('wunderline')\n\napp\n  .description('Set your preferred application platform')\n  .usage('[platform]')\n  .parse(process.argv)\n\nif (app.args.length === 0) {\n  process.exit()\n}\n\nvar platform = app.args[0]\n\nif (platform !== 'web' && platform !== 'mac') {\n  console.log('Invalid platform')\n  process.exit()\n}\n\nconf.set('platform', platform)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-starred.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar getLists = require('./lib/get-lists')\nvar printList = require('./lib/print-list')\nvar auth = require('./lib/auth')\n\napp\n  .description('View starred tasks')\n  .parse(process.argv)\n\nfunction main () {\n  getLists(function (err, data) {\n    if (err) process.exit(1)\n\n    data.forEach(function (list) {\n      list.tasks = list.tasks.filter(function (item) {\n        return item.starred\n      })\n      printList(list)\n    })\n  })\n}\n\nauth(main)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-today.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar getLists = require('./lib/get-lists')\nvar printList = require('./lib/print-list')\nvar auth = require('./lib/auth')\n\napp\n  .description('View tasks due today')\n  .parse(process.argv)\n\nfunction main () {\n  getLists(function (err, data) {\n    if (err) process.exit(1)\n\n    var today = new Date()\n\n    data.forEach(function (list) {\n      list.tasks = list.tasks.filter(function (item) {\n        if (!item.due_date) return false\n        var due = new Date(item.due_date)\n        return due.getTime() <= today.getTime()\n      })\n\n      printList(list)\n    })\n  })\n}\n\nauth(main)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-week.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar moment = require('moment')\nvar getLists = require('./lib/get-lists')\nvar printList = require('./lib/print-list')\nvar auth = require('./lib/auth')\n\napp\n  .description('View tasks due this week')\n  .parse(process.argv)\n\nfunction main () {\n  getLists(function (err, data) {\n    if (err) process.exit(1)\n\n    var week = moment().format('ww-YYYY')\n\n    data.forEach(function (list) {\n      list.tasks = list.tasks.filter(function (item) {\n        if (!item.due_date) return false\n        return moment(item.due_date).format('ww-YYYY') === week\n      })\n\n      printList(list)\n    })\n  })\n}\n\nauth(main)\n","/home/travis/build/npmtest/node-npmtest-wunderline/node_modules/wunderline/wunderline-whoami.js":"#!/usr/bin/env node\n\nvar app = require('commander')\nvar api = require('./lib/api')\nvar auth = require('./lib/auth')\nvar Configstore = require('configstore')\nvar conf = new Configstore('wunderline')\nvar chalk = require('chalk')\n\napp\n  .description('Display effective user')\n  .parse(process.argv)\n\nfunction main () {\n  api('/user', function (err, res, body) {\n    if (err || body.error) {\n      console.error(JSON.stringify(err || body.error, null, 2))\n      process.exit(1)\n    }\n    console.log(body.name + ' <' + body.email + '>')\n    console.log(chalk.dim('Authenticated at ' + conf.get('authenticated_at')))\n    process.exit()\n  })\n}\n\nauth(main)\n"}